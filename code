Εδώ δίνεται ο κώδικας για τη λειτουργία του σερβοκινητήρα της κούνιας, της τραμπάλας και του κινητήρα που περιστρέφει το καρουζέλ. 

Αρχικά η θέση του σερβοκινητήρα είναι σε τέτοια θέση ώστε να είναι οριζόντια η τραμπάλα και κάθετη η κούνια.
Ανάλογα πως  τοποθετήσαμε τυος σερβοκινητήρες στην αρχική τους θέση. 
Ο διακόπτης συνδέεται με μια αντίσταση και ένα led ώστε όταν είναι κλειστός (θέση 1) τότε να διαρρέει ρεύμα το led και αυτό να ανάβει. 
Συνδέουμε λοιπόν το led με μια ψηφιακή ακίδα και ελέγχουμε διαρκώς αν διαρέεται από ρεύμα, αν η κατάστασή της είναι high.
Αν ισχύει, τότε αρχίζει να κουνιέται, ο σερβοκινητήρας δηλαδή να αλλάζει γωνία ανά μισό δευτερόλεπτο. Η αλλαγή της γωνίας είναι περίπου
στις 20-30 μοίρες (+-10, +-15) αλλά αυτό μπορεί να αλλάξει. Όταν ο διακόπτης πάει στη θέση 0, δηλαδή έχουμε ανοιχτό κύκλωμα και 
το led δεν το διαρρέει ρεύμα, είναι σβηστό, τότε ο σερβοκινητήρας έρχεται στην αρχική του θέση ώστε η κούνια να είναι οριζόντια και να 
μπορεί να ανέβει και να κατέβει ένα παιδί.
Με τον ίδιο τρόπο συνδέσαμε και την τραμπάλα. Όταν το δεύτερο led είναι αναμένο δηλαδή διαρρέεται από ρεύμα τότε η τραμπάλα ανεβοκατεβαίνει.
Ο σερβοκινητήρας από την αρχική του θέση αλλάζει γωνία + ή - 15-20 μοίρες. Όταν το led δεν διαρρέεται από ρεύμα τότε η τραμπάλα επιστρέφει
στην αρχική οριζόνται θέση ώστε να μπορεί να ανέβει ή να κατέβει κάποιος.
Σε αυτό το κύκλωμα συνδέσαμε και τον κινητήρα που περιστρέφει το καρουζέλ. Ο κινητήρας μπορεί να συνδεθεί με το ρεύμα και ο διακόπτης να 
τοποθετηθεί στην τροφοδοσία ώστε να δίνει ή όχι ρεύμα στον κινητήρα. Έτσι δεν χρειάζεται να ελέγχουμε κάτι για να τον λειτουργούμε ή
όχι. 
Ο σερβοκινητήρας της κούνιας είναι στο 3, της τραμπάλας στο 4 και στο 5 ο κινητήρας του καρουζέλ. Το led από το οποίο εξαρτάται η κούνια
είναι στο 8 ενώ το led από το οποίο εξαρτάται η τραμπάλα στο 9.
Αρχικά η θέση της κούνιας είναι στις 15 μοίρες και της τραμπάλας στις 70 ενώ ο κινητήρας είναι στο όχι ρεύμα.

#include <Servo.h>

Servo servo_pin_3;
Servo servo_pin_4;

void setup()
{
  pinMode( 9, INPUT);
  pinMode( 8, INPUT);
  pinMode( 5, OUTPUT);
  servo_pin_3.attach(3);
  servo_pin_4.attach(4);
  pinMode( 5 , OUTPUT);
  servo_pin_3.write( 15 );

  servo_pin_4.write( 70 );

  digitalWrite( 5 , LOW );

}

void loop()
{
  analogWrite(5 , 150);
  if (( ( ( digitalRead(8) ) == ( HIGH ) ) && ( ( digitalRead(9) ) == ( HIGH ) ) ))
  {
    servo_pin_3.write( 0 );
    servo_pin_4.write( 50 );
    delay( 500 );
    servo_pin_3.write( 30 );
    servo_pin_4.write( 90 );
    delay( 500 );
  }
  else
  {
    if (( ( ( digitalRead(8) ) == ( HIGH ) ) && ( ( digitalRead(9) ) == ( LOW ) ) ))
    {
      servo_pin_4.write( 70 );
      servo_pin_3.write( 0 );
      delay( 500 );
      servo_pin_3.write( 30 );
      delay( 500 );
    }
    else
    {
      if (( ( ( digitalRead(8) ) == ( LOW ) ) && ( ( digitalRead(9) ) == ( HIGH ) ) ))
      {
        servo_pin_3.write( 15 );
        servo_pin_4.write( 50 );
        delay( 500 );
        servo_pin_4.write( 90 );
        delay( 500 );
      }
      else
      {
        servo_pin_3.write( 15 );
        servo_pin_4.write( 70 );
      }
    }
  }
}

